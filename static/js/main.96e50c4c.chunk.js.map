{"version":3,"sources":["components/editor/Editor.js","components/previewer/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","Col","xs","sm","md","Row","style","position","border","margin","onClick","resetButton","clearButton","minHeight","minWidth","overflowY","width","id","onChange","value","placeHolder","marked","setOptions","renderer","Renderer","breaks","Previewer","padding","borderBottom","overflowX","dangerouslySetInnerHTML","__html","previewText","placeholder","App","state","text","handleChange","bind","clearEditor","resetEditor","this","setState","e","target","Container","display","flexWrap","justifyContent","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WA4CeA,EAxCA,SAACC,GACd,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACvB,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,SAAU,WACVC,OAAQ,kBACRC,OAAQ,SAGV,wBAAIH,MAAO,CAAEG,OAAQ,uBAArB,UACA,4BACEC,QAASV,EAAMW,YACfL,MAAO,CAAEG,OAAQ,uBAFnB,SAMA,4BACEC,QAASV,EAAMY,YACfN,MAAO,CAAEG,OAAQ,uBAFnB,UAQF,8BACEH,MAAO,CACLO,UAAW,OACXC,SAAU,MACVC,UAAW,UACXC,MAAO,QAETC,GAAG,SACHC,SAAUlB,EAAMkB,SAChBC,MAAOnB,EAAMoB,gB,MChCrBC,IAAOC,WAAW,CAChBC,SAAU,IAAIF,IAAOG,SACrBC,QAAQ,IAGV,IAuBeC,EAvBG,SAAC1B,GACjB,OACE,kBAACC,EAAA,EAAD,CAAKK,MAAO,CAAEE,OAAQ,kBAAmBmB,QAAS,QAChD,kBAACtB,EAAA,EAAD,CACEC,MAAO,CACLC,SAAU,WACVqB,aAAc,kBACdnB,OAAQ,SAGV,wBAAIH,MAAO,CAAEG,OAAQ,uBAArB,YAEF,yBACEH,MAAO,CAAEuB,UAAW,OAAQF,QAAS,qBACrCV,GAAG,UACHa,wBAAyB,CACvBC,OAAQV,IAAOrB,EAAMgC,kB,QCnB/BX,IAAOC,WAAW,CAChBG,QAAQ,IAGV,IAAMQ,EAAW,wpCAkGFC,E,kDAlDb,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAEDmC,MAAQ,CACXC,KAAMH,GAER,EAAKI,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBARF,E,0DAYjBG,KAAKC,SAAS,CAAEN,KAAM,O,oCAItBK,KAAKC,SAAS,CAAEN,KAAMH,M,mCAGXU,GACXF,KAAKC,SAAS,CACZN,KAAMO,EAAEC,OAAOzB,U,+BAKjB,OACE,kBAAC0B,EAAA,EAAD,CACEvC,MAAO,CACLwC,QAAS,OACTC,SAAU,OACVtC,OAAQ,OACRuC,eAAgB,iBAGlB,wBAAI1C,MAAO,CAAEU,MAAO,OAAQiC,UAAW,WAAvC,2CAGA,kBAAC,EAAD,CACE7B,YAAaqB,KAAKN,MAAMC,KACxBlB,SAAUuB,KAAKJ,aACfzB,YAAa6B,KAAKF,YAClB5B,YAAa8B,KAAKD,cAEpB,kBAAC,EAAD,CAAWR,YAAaS,KAAKN,MAAMC,Y,GA7CzBc,aC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96e50c4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <Col xs={12} sm={12} md={6}>\r\n      <Row\r\n        style={{\r\n          position: \"relative\",\r\n          border: \"2px solid black\",\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <h2 style={{ margin: \"auto auto auto 5px\" }}>Editor</h2>\r\n        <button\r\n          onClick={props.resetButton}\r\n          style={{ margin: \"auto 1px auto auto\" }}\r\n        >\r\n          Reset\r\n        </button>\r\n        <button\r\n          onClick={props.clearButton}\r\n          style={{ margin: \"auto 15px auto 1px\" }}\r\n        >\r\n          Clear\r\n        </button>\r\n      </Row>\r\n\r\n      <textarea\r\n        style={{\r\n          minHeight: \"88vh\",\r\n          minWidth: \"50%\",\r\n          overflowY: \"visible\",\r\n          width: \"100%\",\r\n        }}\r\n        id='editor'\r\n        onChange={props.onChange}\r\n        value={props.placeHolder}\r\n      ></textarea>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"./Previewer.scss\";\r\nimport marked from \"marked\";\r\nimport { Row } from \"react-bootstrap\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  breaks: true,\r\n});\r\n\r\nconst Previewer = (props) => {\r\n  return (\r\n    <Col style={{ border: \"2px solid black\", padding: \"0px\" }}>\r\n      <Row\r\n        style={{\r\n          position: \"relative\",\r\n          borderBottom: \"2px solid black\",\r\n          margin: \"auto\",\r\n        }}\r\n      >\r\n        <h2 style={{ margin: \"auto auto auto 5px\" }}>Preview</h2>\r\n      </Row>\r\n      <div\r\n        style={{ overflowX: \"auto\", padding: \"0px 15px 0px 15px\" }}\r\n        id='preview'\r\n        dangerouslySetInnerHTML={{\r\n          __html: marked(props.previewText),\r\n        }}\r\n      />\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n","import React, { Component } from \"react\";\nimport marked from \"marked\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Editor from \"./components/editor/Editor\";\nimport Previewer from \"./components/previewer/Previewer\";\nimport { Container } from \"react-bootstrap\";\n\nmarked.setOptions({\n  breaks: true,\n});\n\nconst placeholder = `# This is a heading\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: placeholder,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.clearEditor = this.clearEditor.bind(this);\n    this.resetEditor = this.resetEditor.bind(this);\n  }\n\n  clearEditor() {\n    this.setState({ text: \"\" });\n  }\n\n  resetEditor() {\n    this.setState({ text: placeholder });\n  }\n\n  handleChange(e) {\n    this.setState({\n      text: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Container\n        style={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          margin: \"auto\",\n          justifyContent: \"space-around\",\n        }}\n      >\n        <h1 style={{ width: \"100%\", textAlign: \"center\" }}>\n          Welcome to my React Markdown Previewer!\n        </h1>\n        <Editor\n          placeHolder={this.state.text}\n          onChange={this.handleChange}\n          clearButton={this.clearEditor}\n          resetButton={this.resetEditor}\n        />\n        <Previewer previewText={this.state.text} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}